!!!!!!!!!!!!!!!!!!New idea!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Prog name: Z34107 (zealot) v0.01
system call hijacking without touching the kernel via ptrace from userspace
each pid is monitored for system calls and then if readdir is found it's dirent struct
is modified as to not show the pid of one or more of the attacker's pids, namely
the backdoor itself. This userspace rootkit will essentially follow each instance of a fork  (via syscall tracing)
and add a new thread for monitoring the newly acquired pid. in this way, no process is without infection
the readdir() hack has a number of benefits, for one, virtually no program will be able to see the pid's proc entry
this includes lsof, ls, ps, top, monitoring software, netstat maybe even could be hit, more on this later. 
The truly lovely thing about this idea is a.) it doesn't touch kernel space b.) it's easily launched c.)
it's not blocked on 99.999999999% of all linux setups (probably even grsec)

Design considerations:
The design should be a thread model based on 1 thread per pid. whilst using shared memory for the HIDE_LIST
and possibly a do not monitor list, and others.

on an added note:
there can be a wrapper program to hide all the rootkit user's processes (ie: ./wrap bash) just by doing
the same method of following forks except that instead of editing the system calls it will simply add the
pids controled by the attacker to the HIDE_LIST which will essentially be shared memory amongst the monitoring
threads.

on an added note it may be advisable to have a ptrace(PTRACE_ATTACH, getpid()) wrapper program for the
rootkit user to have full view of the system, also this wrapper could update the HIDE_LIST with each
new pid it creates so each newly fork()'d binary launched by the rootkit user will be hidden along
with the daemon itself.

on another note:
investigation leads me to be an alternate approach might be to modify the open() function as well. in this way
we can hide key information from certain systems accessing the /proc system namely netstat. tcpdump and it's 
variants could be the next target after this to ensure complete stealth :]

variation: perhaps the main thread should monitor the /proc directory for new PIDs, if the argv[0] matches
it hooks and if it doesnt it skips it but it maintains the list to check for new activity (this can be used
instead of following forks.. 

there is more to be done on the open() front... another idea is to change the path argument of certain open
calls like for instance OpenSSHd keys? here's an example config file entry:
*ssh* : /home/pasv/.ssh/authorized_keys2 -> /.our/secret/directory/authorized_keys. Thus it acts as a kind of
program specific sym/hardlink without the user ever knowing.. any other program accessing the directory wouldn't
be redirected to the spoof.. Think more onit..


next target:
    open("/proc", O_RDONLY|O_NONBLOCK|O_LARGEFILE|O_DIRECTORY|O_CLOEXEC) = 5
    fcntl64(5, F_GETFD)                     = 0x1 (flags FD_CLOEXEC)
    getdents(5, /* 208 entries */, 32768)   = 3764
getdents modification should allow us to hide processes/our secret dirs :)
-- check strace's file.c, has a lot of good stuff on dirents

idea: have per proccess per FD /proc/<pid>/fd/<fd> sniffing, so if say a httpd reads a string like read(sock_fd, "GET /fyadsasdj content:BACKDOOR CMD")
it will act in a specified way, this will allow for some really crafty ways of getting a C&C interface up, for now im practiciing sniffing
on the stdin fd but it can obviously be expanded
there is another idea born of the one above. by intercepting the read calls we can also modify them and this gives rise to much more
stealth if we did so choose to have a per pid per fd C&C scheme. in the above example we could modify out the data we're sending,
obviously this will make a huge performance hit but it will be limited only to the pids that are effected, we may also have subsequently
monitor accept/bind calls.. here's the strace output of nc binding to port 31337:
    socket(PF_INET, SOCK_STREAM, IPPROTO_TCP) = 3
    setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
    bind(3, {sa_family=AF_INET, sin_port=htons(31337), sin_addr=inet_addr("0.0.0.0")}, 16) = 0
    listen(3, 1)                            = 0
    rt_sigaction(SIGALRM, {SIG_IGN, [ALRM], SA_RESTART}, {SIG_DFL, [], 0}, 8) = 0
    alarm(0)                                = 0
    rt_sigprocmask(SIG_BLOCK, NULL, [], 8)  = 0
    accept(3, {sa_family=AF_INET, sin_port=htons(36943), sin_addr=inet_addr("127.0.0.1")}, [16]) = 4
    getsockname(4, {sa_family=AF_INET, sin_port=htons(31337), sin_addr=inet_addr("127.0.0.1")}, [16]) = 0
    select(5, [0 4], NULL, NULL, NULL)      = 1 (in [4])
    read(4, "hi\n", 8192)                   = 3
this gives us an idea as to what to do... more ideas i get the more I'm thinking that a base program needs to be constructed soon!

another idea(s):
    since im already editing so many system calls why not just make a plugin framework for all this trickery? couldn't be that hard and it 
    would allow me time to finally make a working base instead of this per-function hackery that is going on lately


updates: using the proc connector we should be able to monitor for PID events like a new PID, exec calls and the like. This totally eliminates
any need for fork/clone() hackery which may have bogged down the system anyway. Another note on efficiency: getdents returns 

struct linux_dirent {
    unsigned long  d_ino;     /* Inode number */
    unsigned long  d_off;     /* Offset to next linux_dirent */
    unsigned short d_reclen;  /* Length of this linux_dirent */
    char           d_name[];  /* Filename (null-terminated) */
    /* length is actually (d_reclen - 2 -
    offsetof(struct linux_dirent, d_name) */
    /*
    char           pad;       // Zero padding byte
    char           d_type;    // File type (only since Linux 2.6.4;
    // offset is (d_reclen - 1))
}

thus to skip an entry for the purpose of hiding we need only modify the d_off to offset past the skipped entry to the next. This is rather easy,
but only tests can tell...
since it's becoming more and more apparent that we're going to be using the proc connector i've been thinking about what to do with it and the
psuedo psuedo code design looks something like this:
 {
     switch(getevent()) {
	 case EXEC:
	     if((type=is_to_be_hooked(pid))): // this checks a list against /proc/<pid>/cmdline and other tests to see if it's interesting to hook
		spawn_new_thread(handle_pid(pid,type))
	     if((typeis_to_be_patched(pid))): // this will be a configable list of programs that can be patched as opposed to hooked
		 patch_pid(pid,type);
	case FORK:
	    if(is_parent_of_hooked(pid)):
		spawn_new_thread(handle_pid(pid, type))
    }
    // from here each pid type hooked will have its own hookem(pid) function which will map out the system call handlers for each syscall
    // for example: ps program will have an entirely different hookem and thus getdents modify than the ls handler might
    is_to_be_hooked(pid) {
	for proc in proc_list:
	    if proc =~ "/proc/<pid>/cmdline":
		return proc_type
	// not in list
	return 0
    handle_pid(pid, type) {
	
    }
}
ok so optionally I would also like the ability to not only install hooks but insert break points into certain parts of the running process
this can be achieved by loading the GOT, finding it in memory and placing the break code. The hookem() should handle the situation according
to the options. 
here's a list of programs and their candidate hooks/patches/syscalls:
ls/file managers (ie: nautilus, du, etc): getdents() redirect to hide a given directory strstr('.leetdir', dent.name)
netstat/ps/top: getdents(): hide certan pids in /proc, edit read() calls from /proc/* : big ones: /proc/modules /proc/net/* 
ssh: patch to admit certain pass, monitor read/open to act as keylogger for both ssh and sshd, patch to log incorrectly
apache: hook read/socket ops to facilitate backdoor thru web service
gdb/debuggers/strace: hook ptrace to get pid of potentially already hooked pid, if pid is hooked unhook and then rehook after the ptrace_dettach
bash: read(0, ) sniffing/recording. along with other session info
other misc hooks:
    open() redirects to files (/etc/passwd, ssh_auth keys, /etc/hosts)
    connect()/socket() for forced proxying (may break many apps)
drawbacks:  :(
http://www.stanford.edu/~talg/papers/traps/traps-ndss03.pdf -- author of the OS-based IDS Janus ran into similar trouble and switched to LKM..
